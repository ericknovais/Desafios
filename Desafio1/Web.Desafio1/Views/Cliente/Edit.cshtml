@model Web.Desafio1.ViewModels.ClienteViewModel

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div id="layoutSidenav_content">
    <main>
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-lg-6">
                    <div class="card shadow-lg border-0 rounded-lg mt-5">
                        <div class="card-header">
                            <h3 class="text-center font-weight-light my-4">
                                @Html.Raw(TempData["EnInclusao"])
                            </h3>
                        </div>
                        <div class="card-body">

                            @using (Html.BeginForm())
                            {
                                <form id="myForm">
                                    <div class="form-row">
                                        <div class="col-md-12">
                                            @Html.LabelFor(model => model.NomeCompleto, "Nome Completo", htmlAttributes: new { @class = "small mb-1" })
                                            <div class="form-group">
                                                @Html.EditorFor(model => model.NomeCompleto, new { htmlAttributes = new { @class = "form-control py-6" } })
                                                @Html.ValidationMessageFor(model => model.NomeCompleto, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-row">
                                        <div class="col-md-6">
                                            @Html.LabelFor(model => model.CPF, htmlAttributes: new { @class = "small mb-1" })
                                            <div class="form-group">
                                                @Html.EditorFor(model => model.CPF, new { htmlAttributes = new { @class = "form-control py-6" } })
                                                @Html.ValidationMessageFor(model => model.CPF, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            @Html.LabelFor(model => model.DataNascimento, "Data da nascimento", htmlAttributes: new { @class = "small mb-1" })
                                            <div class="form-group">
                                                @Html.EditorFor(model => model.DataNascimento, new { htmlAttributes = new { @class = "form-control py-3" } })
                                                @Html.ValidationMessageFor(model => model.DataNascimento, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-row">
                                        <div class="col-md-12">
                                            @Html.LabelFor(model => model.Email, "E-mail", htmlAttributes: new { @class = "small mb-1" })
                                            <div class="form-group">
                                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control py-3" } })
                                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-row">
                                        <div class="col-md-3">
                                            @Html.LabelFor(model => model.CEP, "CEP", htmlAttributes: new { @class = "small mb-1" })
                                            <div class="form-group">
                                                @Html.EditorFor(model => model.CEP, new { htmlAttributes = new { @class = "form-control py-3" } })
                                                @Html.ValidationMessageFor(model => model.CEP, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="col-md-9">
                                            @Html.LabelFor(model => model.Bairro, "Bairro", htmlAttributes: new { @class = "small mb-1" })
                                            <div class="form-group">
                                                @Html.EditorFor(model => model.Bairro, new { htmlAttributes = new { @class = "form-control py-3" } })
                                                @Html.ValidationMessageFor(model => model.Bairro, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-row">
                                        <div class="col-md-12">
                                            @Html.LabelFor(model => model.Logradouro, "Logradouro", htmlAttributes: new { @class = "small mb-1" })
                                            <div class="form-group">
                                                @Html.EditorFor(model => model.Logradouro, new { htmlAttributes = new { @class = "form-control py-3" } })
                                                @Html.ValidationMessageFor(model => model.Logradouro, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-row">
                                        <div class="col-md-4">
                                            @Html.LabelFor(model => model.Numero, "Número", htmlAttributes: new { @class = "small mb-1" })
                                            <div class="form-group">
                                                @Html.EditorFor(model => model.Numero, new { htmlAttributes = new { @class = "form-control py-3" } })
                                                @Html.ValidationMessageFor(model => model.Numero, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="col-md-8">
                                            @Html.LabelFor(model => model.Complemento, "Complemento", htmlAttributes: new { @class = "small mb-1" })
                                            <div class="form-group">
                                                @Html.EditorFor(model => model.Complemento, new { htmlAttributes = new { @class = "form-control py-3" } })
                                                @Html.ValidationMessageFor(model => model.Complemento, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-row">
                                        <div class="col-md-6">
                                            @Html.LabelFor(model => model.EstadoID, "Estado", htmlAttributes: new { @class = "small mb-1" })
                                            <div class="form-group">
                                                @Html.DropDownList("EstadoID", "Selecione Cidade")
                                                @Html.ValidationMessageFor(model => model.EstadoID, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            @Html.LabelFor(model => model.CidadeID, "Cidade", htmlAttributes: new { @class = "small mb-1" })
                                            <div class="form-group">
                                                @Html.DropDownList("CidadeID", "Selecione Cidade")
                                                @Html.ValidationMessageFor(model => model.CidadeID, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>

                                    <div class="form-group d-flex align-items-center justify-content-between mt-4 mb-0">
                                        <div class="small"></div>
                                        <input id="btnSalvar" type="submit" value="Salvar" class="btn btn-primary" />
                                    </div>
                                </form>
                            }

                            <!-- Botão oculto que abre o modal de SUCESSO-->
                            <button id="btnModalSucesso" type="button" style="display: none;" data-toggle="modal" data-target="#modalSucesso"></button>

                            @if (TempData["Mensagem"] == "Sucesso")
                            {<!-- Modal -->
                                <div id="modalSucesso" class="modal fade" role="dialog">
                                    <div class="modal-dialog">
                                        <div class="modal-content">

                                            <!-- Cabeçalho do modal -->
                                            <div class="modal-header">
                                                <h4 class="modal-title">
                                                    SUCESSO
                                                    <i class="fas fa-check"></i>
                                                </h4>
                                                <button type="button" class="close" data-dismiss="modal">&times;</button>
                                            </div>
                                            <!-- Corpo do modal -->
                                            <div class="modal-body">
                                                <p>Foi incluído um novo <b>cliente</b> no sistema </p>
                                            </div>

                                            <!-- Rodapé do modal-->
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn btn-success" data-dismiss="modal">Ok</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>}

                            <!-- Botão oculto que abre o modal de Alerta -->
                            <button id="btnModalErro" type="button" style="display: none;" data-toggle="modal" data-target="#modalErro"></button>
                            @if (TempData["Alerta"] != null)
                            {<!-- Modal -->
                                <div id="modalErro" class="modal fade" role="dialog">
                                    <div class="modal-dialog">
                                        <div class="modal-content">

                                            <!-- Cabeçalho do modal -->
                                            <div class="modal-header">
                                                <h4 class="modal-title">
                                                    ATENÇÃO
                                                    <i class="fas fa-exclamation-triangle"></i>
                                                </h4>
                                                <button type="button" class="close" data-dismiss="modal">&times;</button>
                                            </div>
                                            <!-- Corpo do modal -->
                                            <div class="modal-body">
                                                <p>@Html.Raw(TempData["Alerta"])</p>
                                            </div>

                                            <!-- Rodapé do modal-->
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-danger" data-dismiss="modal">Fechar</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <script src="~/Scripts/jquery-1.10.2.min.js"></script>
        <script src="~/Scripts/jquery.validate.min.js"></script>
        <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
        @section Scripts {
            <script src="~/Scripts/jquery.validate.min.js"></script>
            <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
            <script src="~/Scripts/inputmask/jquery.inputmask.js"></script>

            <script>
                $(document).ready(function () {
                    $("#btnModalSucesso").click();
                    $("#btnModalErro").click();
                    $("#CPF").inputmask("mask", { "mask": "999.999.999-99" });
                    $("#CEP").inputmask("mask", { "mask": "99999-999" });
                    $("#EstadoID").addClass("form-control");
                    $("#CidadeID").addClass("form-control");
                    if ($("#DataNascimento").prop("defaultValue") != '01/01/0001')
                        $("#DataNascimento").val(formatarDataNascimento($("#DataNascimento").prop("defaultValue")));
                    $("#EstadoID").on('change', function () {
                        getCidades();
                    });
                    $("#CEP").blur(function () {
                        getApiCEP();
                    })
                });

                function getCidades() {

                    $("#CidadeID").empty();
                    $("#CidadeID").append("<option value='" + "'>Selecione Cidade</option>");

                    $.ajax(
                        {
                            type: "GET",
                            url: "/Cidade/ListaCidadesPorIdEstado",
                            datatype: "json",
                            data: { "EstadoID": $("#EstadoID").val() },
                        }
                    ).done(function (cidades) {
                        Object.keys(cidades).map(function (item) {
                            var OptionValue = "<option value = '" + cidades[item].ID + "'>" + cidades[item].Nome + "</option >"
                            $("#CidadeID").append(OptionValue);
                        });
                    })
                }

                function getApiCEP() {
                    $.ajax(
                        {
                            type: "GET",
                            url: "https://viacep.com.br/ws/" + $("#CEP").val() + "/json/",
                            datatype: "json",
                        }
                    ).done(function (endereco) {
                        $("#Bairro").val(endereco.bairro);
                        $("#Logradouro").val(endereco.logradouro);
                        getEstado(endereco);
                    })
                }

                function getEstado(endereco) {
                    $.ajax(
                        {
                            type: "GET",
                            url: "/Estado/ObterEstadoPorUF",
                            datatype: "json",
                            data: { "UF": endereco.uf }
                        }
                    ).done(function (estado) {
                        $("#EstadoID").val($('option:contains("' + estado.Nome + '")').val());
                        sleep(50).then(() => { getCidades() });
                        sleep(100).then(() => { $("#CidadeID").val($('option:contains("' + endereco.localidade.toUpperCase() + '")').val()); });
                    }).fail(function () {
                        console.log('Não existe o estado: ' + endereco.uf.toUpperCase() + ' cadastrado no sistema atualize a base de dados \n' +
                            'Não existe a cidade: ' + endereco.localidade.toUpperCase() + ' cadastrado no sistema Atualize a base de dados');
                                })
                }

                function formatarDataNascimento(date) {

                    var cort = date.split('/');
                    var d = new Date((cort[2] + '/' + cort[1] + '/' + cort[0])),
                        month = '' + (d.getMonth() + 1),
                        day = '' + d.getDate(),
                        year = d.getFullYear();

                    if (month.length < 2)
                        month = '0' + month;
                    if (day.length < 2)
                        day = '0' + day;

                    return [year, month, day].join('-');
                }

                function sleep(ms) {
                    return new Promise(resolve => setTimeout(resolve, ms));
                }
            </script>
        }
    </main>
</div>
